{"version":3,"sources":["components/Book.js","utils/categories.js","components/CategoryFilter.js","containers/BooksList.js","actions/index.js","containers/BooksForm.js","components/App.js","reducers/books.js","reducers/filter.js","reducers/index.js","index.js"],"names":["Book","book","handleRemoveBook","className","id","title","category","type","onClick","sort","Filter","filter","changeFilter","htmlFor","defaultValue","onChange","e","target","value","key","filters","map","cat","BooksList","books","removeBook","CategoryFilter","b","connect","dispatch","defaultProps","createBook","Date","getTime","useState","setTitle","setCategory","handleChange","name","placeholder","list","categories","includes","push","App","state","action","combineReducers","randomId","Math","floor","random","testLibrary","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e569134d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, handleRemoveBook }) => (\n  <tr>\n    <td className=\"book-info\">\n      <div className=\"id\">{book.id}</div>\n      <div className=\"title\">{book.title}</div>\n      <div className=\"category\">{book.category}</div>\n      <div className=\"remove\">\n        <button type=\"button\" onClick={handleRemoveBook}>\n          Remove\n        </button>\n      </div>\n    </td>\n  </tr>\n);\n\nexport default Book;\nBook.propTypes = {\n  book: PropTypes.exact({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    category: PropTypes.string,\n  }).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n","export default [\n  'Action',\n  'Biography',\n  'History',\n  'Horror',\n  'Kids',\n  'Learning',\n  'Sci-Fi',\n  'Classic literature',\n].sort();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport filters from '../utils/categories';\n\nconst Filter = ({ filter, changeFilter }) => (\n  <div id=\"category-filter\">\n    <label htmlFor=\"category\">\n      Filter\n      <select\n        id=\"filters\"\n        // value={filter}\n        defaultValue={filter}\n        onChange={(e) => changeFilter(e.target.value)}\n      >\n        <option key=\"All\" value=\"All\">\n          All\n        </option>\n        {filters.map((cat) => (\n          <option key={cat} value={cat}>\n            {cat}\n          </option>\n        ))}\n      </select>\n    </label>\n  </div>\n);\n\nexport default Filter;\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeBook, changeFilter } from '../actions';\nimport Book from '../components/Book';\nimport CategoryFilter from '../components/CategoryFilter';\n\nconst mapStateToProps = ({ books, filter }) => ({ books, filter });\nconst mapDispatchToProps = (dispatch) => ({\n  removeBook: (id) => dispatch(removeBook(id)),\n  changeFilter: (filter) => dispatch(changeFilter(filter)),\n});\n\nconst BooksList = ({\n  books = [], filter, removeBook, changeFilter,\n}) => (\n  <>\n    <CategoryFilter filter={filter} changeFilter={changeFilter} />\n    <table className=\"book-list\">\n      <tbody>\n        {books\n          && books\n            .filter((b) => b.category === filter || filter === 'All')\n            .map((book) => (\n              <Book\n                key={book.id}\n                book={book}\n                handleRemoveBook={() => {\n                  removeBook(book.id);\n                }}\n              />\n            ))}\n      </tbody>\n    </table>\n  </>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n\nBooksList.defaultProps = {\n  books: [],\n};\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.object),\n  filter: PropTypes.string.isRequired,\n  removeBook: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","export const CREATE_BOOK = 'CREATE_BOOK';\nexport const REMOVE_BOOK = 'REMOVE_BOOK';\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\n\nexport const createBook = (\n  book = {\n    id: new Date().getTime(),\n    title: '',\n    category: '',\n  },\n) => ({\n  type: CREATE_BOOK,\n  book,\n});\n\nexport const removeBook = (id) => ({\n  type: REMOVE_BOOK,\n  id,\n});\n\nexport const changeFilter = (filter) => ({\n  type: CHANGE_FILTER,\n  filter,\n});\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createBook } from '../actions';\nimport categories from '../utils/categories';\n\nconst mapStateToProps = ({ books }) => ({ books });\nconst mapDispatchToProps = (dispatch) => ({\n  createBook: (book) => dispatch(createBook(book)),\n});\n\nconst BooksForm = ({ createBook }) => {\n  const [title, setTitle] = useState('');\n  const [category, setCategory] = useState('');\n  const handleChange = ({ target: { name, value } }) => (name === 'title' ? setTitle(value) : setCategory(value));\n  const handleSubmit = () => {\n    createBook({ id: new Date().getTime(), title, category });\n    setTitle('');\n    setCategory('');\n    if (!categories.includes(category)) {\n      categories.push(category);\n      categories.sort();\n    }\n  };\n  return (\n    <>\n      <h2 className=\"book-form-header\">Add new book</h2>\n      <div id=\"book-form\">\n        <input\n          id=\"title-input\"\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          placeholder=\"Book title\"\n          onChange={handleChange}\n        />\n        <input\n          id=\"category-input\"\n          type=\"text\"\n          name=\"category\"\n          list=\"category-list\"\n          value={category}\n          placeholder=\"Category\"\n          onChange={handleChange}\n        />\n        <datalist id=\"category-list\">\n          {categories.map((cat) => (\n            <option key={cat} value={cat}>\n              {cat}\n            </option>\n          ))}\n        </datalist>\n        <button id=\"submit-btn\" type=\"submit\" onClick={handleSubmit}>\n        Add book\n        </button>\n      </div>\n      <div id=\"category-hint\">\n        Tip: If the category doesn&apos;t exist in the list, just type it in the editor; it will be added to the categories list.\n      </div>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksForm);\n\nBooksForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport BooksList from '../containers/BooksList';\nimport BooksForm from '../containers/BooksForm';\n\nconst App = () => (\n  <>\n    <BooksList />\n    <BooksForm />\n  </>\n);\n\nexport default App;\n","import { CREATE_BOOK, REMOVE_BOOK } from '../actions/index';\n\nconst books = (state = [], action) => {\n  switch (action.type) {\n    case CREATE_BOOK:\n      return [...state, action.book];\n\n    case REMOVE_BOOK:\n      return state.filter((book) => book.id !== action.id);\n\n    default:\n      return state;\n  }\n};\n\nexport default books;\n","import { CHANGE_FILTER } from '../actions/index';\n\nconst filter = (state = 'All', { type, filter }) => {\n  switch (type) {\n    case CHANGE_FILTER:\n      return filter;\n\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\nimport books from './books';\nimport filter from './filter';\n\nexport default combineReducers({ books, filter });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst randomId = () => 9780000000000 + Math.floor(Math.random() * 10000000000);\n\nconst testLibrary = [\n  {\n    id: randomId(),\n    title: 'Tale of two towns',\n    category: 'Classic literature',\n  },\n  {\n    id: randomId(),\n    title: 'Foundation',\n    category: 'Sci-Fi',\n  },\n  {\n    id: randomId(),\n    title: 'The C programming language',\n    category: 'Learning',\n  },\n  {\n    id: randomId(),\n    title: 'Napoleon',\n    category: 'Biography',\n  },\n];\n\nconst store = createStore(\n  reducers,\n  {\n    books: testLibrary,\n    filter: 'All',\n  },\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // eslint-disable-line\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}